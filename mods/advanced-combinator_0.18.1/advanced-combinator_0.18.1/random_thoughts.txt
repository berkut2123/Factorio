-- This file contains some random plans and thoughts for commands
-- This is not considered documentation in any way.
-- The below commands will likely NOT work

if-else(boolean,any,any)
filter(network(this,green),not_in(network(top,green)))

circuit network to check if prio_1 items is ok, then prio_2 items... (line production)

set_simple(1,virtual/signal-V,avg(map(network(top,green),sig->sig_value(sig))))
map(network(top,green),sig->abs(sub(sig_value(sig),current(const(1)))))
set_all(filter(network(top,green),sig->compare(sig_value(sig),<=,current(1))))
-- predicate<signal>
-- function<signal, (signal/number?)>

-- set_simple(1,result_value,func(func(a), func(20)))

-- Current game time in ticks, hours, minutes, seconds

-- Also use types

-- If-else statements
coal = if-else(boolean,const(4),const(2))
-- if (stone == 0) then coal = 1 else coal = 0

-- Filtering
signal_b = filter(red, array(iron_plate, copper_plate, signal_a))
signal_c = filter(red, predicate("==", 20)) -- filter all values that fulfill a criteria

-- Find number of... (check speed!!)
1:virtual/signal-A = surface.find_enemy_units(radius)
2:virtual/signal-B = surface.count_entities_filtered (can be used to detect nearby train, car, etc.)
3:virtual/signal-C = surface.get_pollution(position)
4:virtual/signal-P = power usage...
5:virtual/signal-S = force.item_production_statistics...
6:virtual/signal-C = #surface.get_chunks()
surface.get_resource_counts() ?

-- Can this be done to create Minesweeper ?

transform(array(iron_plate, copper_plate, signal_a, signal_b, signal_c), array(signal_f, signal_g, signal_h, signal_i, signal_j))
transform(top.red, bottom.green) -- take the signals that exist on top.red and map them to signals on bottom.green (?)
