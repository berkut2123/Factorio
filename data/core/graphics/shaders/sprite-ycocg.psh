Texture2D<float4> tex1 : register(t0);
SamplerState _tex1_sampler : register(s0);
Texture2D<float4> tex2 : register(t1);
SamplerState _tex2_sampler : register(s1);

static float2 vUV;
static float4 fragColor;
static float4 vTint;

struct SPIRV_Cross_Input
{
    float2 vUV : TEXCOORD0;
    float4 vTint : TEXCOORD1;
};

struct SPIRV_Cross_Output
{
    float4 fragColor : SV_Target0;
};

float4 YCoCgToRGB(float4 ycocg, float alpha)
{
    float Y = ycocg.w;
    float scale = 1.0f / ((31.875f * ycocg.z) + 1.0f);
    float Co = (ycocg.x - 0.501960813999176025390625f) * scale;
    float Cg = (ycocg.y - 0.501960813999176025390625f) * scale;
    float R = (Y + Co) - Cg;
    float G = Y + Cg;
    float B = (Y - Co) - Cg;
    return float4(R, G, B, alpha);
}

void frag_main()
{
    float4 yCoCg = tex1.Sample(_tex1_sampler, vUV);
    float alpha = tex2.Sample(_tex2_sampler, vUV).x;
    float4 param = yCoCg;
    float param_1 = alpha;
    fragColor = YCoCgToRGB(param, param_1) * vTint;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    vUV = stage_input.vUV;
    vTint = stage_input.vTint;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.fragColor = fragColor;
    return stage_output;
}
